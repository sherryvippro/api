// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _api.Models;

#nullable disable

namespace _api.Migrations
{
    [DbContext(typeof(PhoneManagement))]
    [Migration("20241206204615_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("_api.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AreaId");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AreaId");

                    b.ToTable("Area", (string)null);

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            AreaName = "Quản trị viên"
                        },
                        new
                        {
                            AreaId = 2,
                            AreaName = "Khách hàng"
                        });
                });

            modelBuilder.Entity("_api.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CategoryId");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CategoryName");

                    b.HasKey("CategoryId")
                        .HasName("PK_Category");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = "TL01",
                            CategoryName = "Điện thoại"
                        },
                        new
                        {
                            CategoryId = "TL02",
                            CategoryName = "Laptop"
                        },
                        new
                        {
                            CategoryId = "TL03",
                            CategoryName = "Phụ kiện"
                        },
                        new
                        {
                            CategoryId = "TL04",
                            CategoryName = "Tivi"
                        },
                        new
                        {
                            CategoryId = "TL05",
                            CategoryName = "Đồng hồ"
                        });
                });

            modelBuilder.Entity("_api.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("InvoiceId");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("TotalPrice");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoice", (string)null);

                    b.HasData(
                        new
                        {
                            InvoiceId = "HDB10000",
                            SaleDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(822),
                            TotalPrice = 0m,
                            UserId = 1
                        },
                        new
                        {
                            InvoiceId = "HDB10001",
                            SaleDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(824),
                            TotalPrice = 0m,
                            UserId = 2
                        },
                        new
                        {
                            InvoiceId = "HDB10002",
                            SaleDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(825),
                            TotalPrice = 0m,
                            UserId = 3
                        },
                        new
                        {
                            InvoiceId = "HDB10003",
                            SaleDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(826),
                            TotalPrice = 0m,
                            UserId = 4
                        },
                        new
                        {
                            InvoiceId = "HDB10004",
                            SaleDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(827),
                            TotalPrice = 0m,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("_api.Models.InvoiceDetail", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("InvoiceId");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ProductId");

                    b.Property<string>("Discount")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("SaleQuantity")
                        .HasColumnType("int")
                        .HasColumnName("SaleQuantity");

                    b.HasKey("InvoiceId", "ProductId");

                    b.HasIndex(new[] { "ProductId" }, "IX_InvoiceDetail");

                    b.ToTable("InvoiceDetail", (string)null);

                    b.HasData(
                        new
                        {
                            InvoiceId = "HDB10000",
                            ProductId = "SP10000",
                            Discount = "0",
                            Price = 0,
                            SaleQuantity = 5
                        },
                        new
                        {
                            InvoiceId = "HDB10001",
                            ProductId = "SP10002",
                            Discount = "0",
                            Price = 0,
                            SaleQuantity = 5
                        },
                        new
                        {
                            InvoiceId = "HDB10002",
                            ProductId = "SP10002",
                            Discount = "0",
                            Price = 0,
                            SaleQuantity = 5
                        },
                        new
                        {
                            InvoiceId = "HDB10003",
                            ProductId = "SP10003",
                            Discount = "0",
                            Price = 0,
                            SaleQuantity = 5
                        },
                        new
                        {
                            InvoiceId = "HDB10004",
                            ProductId = "SP10003",
                            Discount = "0",
                            Price = 0,
                            SaleQuantity = 5
                        });
                });

            modelBuilder.Entity("_api.Models.InvoiceIn", b =>
                {
                    b.Property<string>("InvoiceInId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("InvoiceInId");

                    b.Property<DateTime>("InDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SupplierId");

                    b.Property<decimal>("TotalPriceIn")
                        .HasColumnType("money")
                        .HasColumnName("TotalPriceIn");

                    b.HasKey("InvoiceInId");

                    b.HasIndex("SupplierId");

                    b.ToTable("InvoiceIn", (string)null);

                    b.HasData(
                        new
                        {
                            InvoiceInId = "HDN10000",
                            InDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(776),
                            SupplierId = "NCC01",
                            TotalPriceIn = 0m
                        },
                        new
                        {
                            InvoiceInId = "HDN10001",
                            InDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(790),
                            SupplierId = "NCC02",
                            TotalPriceIn = 0m
                        },
                        new
                        {
                            InvoiceInId = "HDN10002",
                            InDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(791),
                            SupplierId = "NCC02",
                            TotalPriceIn = 0m
                        },
                        new
                        {
                            InvoiceInId = "HDN10003",
                            InDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(792),
                            SupplierId = "NCC03",
                            TotalPriceIn = 0m
                        },
                        new
                        {
                            InvoiceInId = "HDN10004",
                            InDate = new DateTime(2024, 12, 7, 3, 46, 15, 652, DateTimeKind.Local).AddTicks(793),
                            SupplierId = "NCC04",
                            TotalPriceIn = 0m
                        });
                });

            modelBuilder.Entity("_api.Models.InvoiceInDetail", b =>
                {
                    b.Property<string>("InvoiceInId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("InvoiceInId");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ProductId");

                    b.Property<string>("Discount")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InQuantity")
                        .HasColumnType("int")
                        .HasColumnName("InQuantity");

                    b.HasKey("InvoiceInId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceInDetail", (string)null);

                    b.HasData(
                        new
                        {
                            InvoiceInId = "HDN10000",
                            ProductId = "SP10000",
                            Discount = "0",
                            InQuantity = 50
                        },
                        new
                        {
                            InvoiceInId = "HDN10000",
                            ProductId = "SP10001",
                            Discount = "0",
                            InQuantity = 50
                        },
                        new
                        {
                            InvoiceInId = "HDN10000",
                            ProductId = "SP10002",
                            Discount = "0",
                            InQuantity = 50
                        },
                        new
                        {
                            InvoiceInId = "HDN10000",
                            ProductId = "SP10003",
                            Discount = "0",
                            InQuantity = 50
                        },
                        new
                        {
                            InvoiceInId = "HDN10001",
                            ProductId = "SP10004",
                            Discount = "0",
                            InQuantity = 50
                        });
                });

            modelBuilder.Entity("_api.Models.Manufacturer", b =>
                {
                    b.Property<string>("ManufacturerId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ManufacturerId")
                        .HasName("PK_Manufacturer");

                    b.ToTable("Manufacturer", (string)null);

                    b.HasData(
                        new
                        {
                            ManufacturerId = "H01",
                            ManufacturerName = "Apple"
                        },
                        new
                        {
                            ManufacturerId = "H02",
                            ManufacturerName = "Samsung"
                        },
                        new
                        {
                            ManufacturerId = "H03",
                            ManufacturerName = "Huawei"
                        },
                        new
                        {
                            ManufacturerId = "H04",
                            ManufacturerName = "Xiaomi"
                        },
                        new
                        {
                            ManufacturerId = "H05",
                            ManufacturerName = "Oppo"
                        });
                });

            modelBuilder.Entity("_api.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ProductId");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("InPrice")
                        .HasColumnType("money");

                    b.Property<string>("ManufacturerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ProductName");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("money");

                    b.HasKey("ProductId")
                        .HasName("PK_Product");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = "SP10000",
                            CategoryId = "TL01",
                            InPrice = 16000000m,
                            ManufacturerId = "H01",
                            ProductName = "iPhone 11 64GB | Chính hãng VN/A",
                            Quantity = 10,
                            SalePrice = 18000000m
                        },
                        new
                        {
                            ProductId = "SP10001",
                            CategoryId = "TL01",
                            InPrice = 18000000m,
                            ManufacturerId = "H01",
                            ProductName = "iPhone 11 128GB | Chính hãng VN/A",
                            Quantity = 10,
                            SalePrice = 20000000m
                        },
                        new
                        {
                            ProductId = "SP10002",
                            CategoryId = "TL01",
                            InPrice = 19000000m,
                            ManufacturerId = "H01",
                            ProductName = "iPhone 11 256GB | Chính hãng VN/A",
                            Quantity = 10,
                            SalePrice = 21000000m
                        },
                        new
                        {
                            ProductId = "SP10003",
                            CategoryId = "TL01",
                            InPrice = 20000000m,
                            ManufacturerId = "H01",
                            ProductName = "iPhone 11 Pro 256GB | Chính hãng VN/A",
                            Quantity = 10,
                            SalePrice = 23000000m
                        },
                        new
                        {
                            ProductId = "SP10004",
                            CategoryId = "TL01",
                            InPrice = 22000000m,
                            ManufacturerId = "H01",
                            ProductName = "iPhone 11 Pro Max 256GB | Chính hãng VN/A",
                            Quantity = 10,
                            SalePrice = 25000000m
                        });
                });

            modelBuilder.Entity("_api.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SupplierId");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SupplierName");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier", (string)null);

                    b.HasData(
                        new
                        {
                            SupplierId = "NCC01",
                            SupplierName = "Apple"
                        },
                        new
                        {
                            SupplierId = "NCC02",
                            SupplierName = "Samsung"
                        },
                        new
                        {
                            SupplierId = "NCC03",
                            SupplierName = "Huawei"
                        },
                        new
                        {
                            SupplierId = "NCC04",
                            SupplierName = "Xiaomi"
                        },
                        new
                        {
                            SupplierId = "NCC05",
                            SupplierName = "Oppo"
                        });
                });

            modelBuilder.Entity("_api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AreaId");

                    b.Property<string>("Avatar")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("UserId")
                        .HasName("PK_User");

                    b.HasIndex("AreaId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Hà Nội",
                            AreaId = 2,
                            Email = "sherryvippro@gmail.com",
                            FullName = "Dương Thị Hằng",
                            Password = "123456789",
                            PhoneNumber = "0346715041"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "Thái Bình",
                            AreaId = 2,
                            Email = "nvana@gmail.com",
                            FullName = "Nguyễn Văn A",
                            Password = "123409584",
                            PhoneNumber = "0938473021"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "Hà Nội",
                            AreaId = 2,
                            Email = "duongthia@gmail.com",
                            FullName = "Dương Thị A",
                            Password = "123456789",
                            PhoneNumber = "0346715041"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "Hà Nội",
                            AreaId = 2,
                            Email = "duongthib@gmail.com",
                            FullName = "Dương Thị B",
                            Password = "123456789",
                            PhoneNumber = "0346715041"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "Hà Nội",
                            AreaId = 2,
                            Email = "sherrie@gmail.com",
                            FullName = "Dương Hằng",
                            Password = "123456789",
                            PhoneNumber = "0346715041"
                        });
                });

            modelBuilder.Entity("_api.Models.Invoice", b =>
                {
                    b.HasOne("_api.Models.User", "UserIdNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserIdNavigation");
                });

            modelBuilder.Entity("_api.Models.InvoiceDetail", b =>
                {
                    b.HasOne("_api.Models.Invoice", "InvoiceIdNavigation")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetail_Invoice");

                    b.HasOne("_api.Models.Product", "ProductIdNavigation")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetail_Product");

                    b.Navigation("InvoiceIdNavigation");

                    b.Navigation("ProductIdNavigation");
                });

            modelBuilder.Entity("_api.Models.InvoiceIn", b =>
                {
                    b.HasOne("_api.Models.Supplier", "SupplierIdNavigation")
                        .WithMany("InvoiceIns")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceIn_Supplier");

                    b.Navigation("SupplierIdNavigation");
                });

            modelBuilder.Entity("_api.Models.InvoiceInDetail", b =>
                {
                    b.HasOne("_api.Models.InvoiceIn", "InvoiceInIdNavigation")
                        .WithMany("InvoiceInDetails")
                        .HasForeignKey("InvoiceInId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceInDetail_InvoiceIn");

                    b.HasOne("_api.Models.Product", "ProductIdNavigation")
                        .WithMany("InvoiceInDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceInDetail_Product");

                    b.Navigation("InvoiceInIdNavigation");

                    b.Navigation("ProductIdNavigation");
                });

            modelBuilder.Entity("_api.Models.Product", b =>
                {
                    b.HasOne("_api.Models.Category", "CategoryIdNavigation")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("_api.Models.Manufacturer", "ManufacturerIdNavigation")
                        .WithMany("Product")
                        .HasForeignKey("ManufacturerId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Manufacturer");

                    b.Navigation("CategoryIdNavigation");

                    b.Navigation("ManufacturerIdNavigation");
                });

            modelBuilder.Entity("_api.Models.User", b =>
                {
                    b.HasOne("_api.Models.Area", "AreaIdNavigation")
                        .WithMany("Users")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Area");

                    b.Navigation("AreaIdNavigation");
                });

            modelBuilder.Entity("_api.Models.Area", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("_api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_api.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("_api.Models.InvoiceIn", b =>
                {
                    b.Navigation("InvoiceInDetails");
                });

            modelBuilder.Entity("_api.Models.Manufacturer", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("_api.Models.Product", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceInDetails");
                });

            modelBuilder.Entity("_api.Models.Supplier", b =>
                {
                    b.Navigation("InvoiceIns");
                });

            modelBuilder.Entity("_api.Models.User", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
